<template>
    <lightning-card title="Product Filter" icon-name="custom:custom14">
        <div class="slds-p-around_medium">
            <lightning-combobox
                name="categories"
                label="Category"
                value={selectedCategory}
                placeholder="Select Category"
                options={categoryOptions}
                onchange={handleCategoryChange}
            ></lightning-combobox>

            <lightning-input
                label="Min Price"
                type="number"
                value={minPrice}
                onchange={handleMinPriceChange}
            ></lightning-input>

            <lightning-input
                label="Max Price"
                type="number"
                value={maxPrice}
                onchange={handleMaxPriceChange}
            ></lightning-input>

            <lightning-button label="Apply Filters" onclick={applyFilters}></lightning-button>
        </div>

        <template if:true={filteredProducts.length}>
            <table class="slds-table slds-table_bordered slds-table_cell-buffer slds-table_striped">
                <thead>
                    <tr class="slds-line-height_reset">
                        <th scope="col">
                            <div class="slds-truncate" title="Product Name">Product Name</div>
                        </th>
                        <th scope="col">
                            <div class="slds-truncate" title="Category">Category</div>
                        </th>
                        <th scope="col">
                            <div class="slds-truncate" title="Price">Price</div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <template for:each={filteredProducts} for:item="product">
                        <tr key={product.id}>
                            <td data-label="Product Name">
                                <div class="slds-truncate" title={product.name}>{product.name}</div>
                            </td>
                            <td data-label="Category">
                                <div class="slds-truncate" title={product.category}>{product.category}</div>
                            </td>
                            <td data-label="Price">
                                <div class="slds-truncate" title={product.price}>{product.price}</div>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </template>
        <template if:true={noResults}>
            <div class="slds-p-around_medium slds-text-align_center">
                No products found with the selected criteria.
            </div>
        </template>
    </lightning-card>
</template>

import { LightningElement, track } from 'lwc';

export default class ProductFilter extends LightningElement {
    @track products = [
        { id: 1, name: 'Laptop', category: 'Electronics', price: 1000 },
        { id: 2, name: 'Headphones', category: 'Electronics', price: 200 },
        { id: 3, name: 'Coffee Maker', category: 'Home Appliances', price: 100 },
        { id: 4, name: 'Blender', category: 'Home Appliances', price: 150 },
        { id: 5, name: 'Sneakers', category: 'Footwear', price: 80 }
    ];

    @track filteredProducts = [...this.products];
    @track selectedCategory = '';
    @track minPrice = '';
    @track maxPrice = '';
    @track noResults = false;

    get categoryOptions() {
        return [
            { label: 'All Categories', value: '' },
            { label: 'Electronics', value: 'Electronics' },
            { label: 'Home Appliances', value: 'Home Appliances' },
            { label: 'Footwear', value: 'Footwear' }
        ];
    }

    handleCategoryChange(event) {
        this.selectedCategory = event.detail.value;
    }

    handleMinPriceChange(event) {
        this.minPrice = event.target.value;
    }

    handleMaxPriceChange(event) {
        this.maxPrice = event.target.value;
    }

    applyFilters() {
        const minPriceValue = parseFloat(this.minPrice);
        const maxPriceValue = parseFloat(this.maxPrice);

        if (minPriceValue > maxPriceValue) {
            this.noResults = true;
            this.filteredProducts = [];
            return;
        }

        this.filteredProducts = this.products.filter(product => {
            const isCategoryMatch = !this.selectedCategory || product.category === this.selectedCategory;
            const isMinPriceMatch = !this.minPrice || product.price >= minPriceValue;
            const isMaxPriceMatch = !this.maxPrice || product.price <= maxPriceValue;

            return isCategoryMatch && isMinPriceMatch && isMaxPriceMatch;
        });

        this.noResults = this.filteredProducts.length === 0;
    }
}